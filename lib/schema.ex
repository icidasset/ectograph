defmodule Ectograph.Schema do

  @doc """
    Cast a Ecto schema (module) to a GraphQL schema (struct)

    @return { :ok | :error, value }
  """
  def cast(arg) do
    schema_name = arg.__schema__(:source)
    types = arg.__schema__(:types)

    # cast each field
    fields = Enum.reduce types, %{}, fn t, acc ->
      { name, type } = t
      { t_state, t_result } = Ectograph.Type.cast(type)

      if t_state === :ok,
        do: Map.put(acc, name, %{ type: t_result }),
      else: acc
    end

    # return object type if all fields were casted
    # otherwise return error
    l_fields = Map.keys(fields) |> length
    l_types = Map.keys(types) |> length

    if l_fields == l_types do
      object_type = %GraphQL.Type.ObjectType{
        name: schema_name,
        description: "Generated by Ectograph",
        fields: fields,
      }

      { :ok, object_type }

    else
      { :error, "Not all types could be cast" }

    end
  end

end

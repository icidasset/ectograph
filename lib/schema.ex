defmodule Ectograph.Schema do

  @doc """
    Cast a Ecto schema (module) to a GraphQL schema (struct)

    @return { :ok | :error, value }
  """
  def cast_schema(arg, :ecto_to_graphql) do
    schema_name = arg.__schema__(:source)
    types = arg.__schema__(:types)

    fields = Enum.reduce types, %{}, fn t, acc ->
      name = elem(t, 0)
      type = elem(t, 1)

      type_cast = Ectograph.Type.cast_type(type, :ecto_to_graphql)
      type_cast_state = elem(type_cast, 0)

      if (type_cast_state === :ok) do
        Map.put(acc, name, %{ type: elem(type_cast, 1) })
      else
        acc
      end
    end

    if (Map.keys(fields) |> length) == (Map.keys(types) |> length) do
      object_type = %GraphQL.Type.ObjectType{
        name: schema_name,
        description: "Generated by Ectograph",
        fields: fields,
      }

      { :ok, object_type }
    else
      { :error, "Not all types could be cast" }
    end
  end

end
